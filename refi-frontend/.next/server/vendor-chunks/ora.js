"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ora";
exports.ids = ["vendor-chunks/ora"];
exports.modules = {

/***/ "(ssr)/./node_modules/ora/index.js":
/*!***********************************!*\
  !*** ./node_modules/ora/index.js ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst readline = __webpack_require__(/*! readline */ \"readline\");\nconst chalk = __webpack_require__(/*! chalk */ \"(ssr)/./node_modules/chalk/source/index.js\");\nconst cliCursor = __webpack_require__(/*! cli-cursor */ \"(ssr)/./node_modules/cli-cursor/index.js\");\nconst cliSpinners = __webpack_require__(/*! cli-spinners */ \"(ssr)/./node_modules/cli-spinners/index.js\");\nconst logSymbols = __webpack_require__(/*! log-symbols */ \"(ssr)/./node_modules/log-symbols/index.js\");\nconst stripAnsi = __webpack_require__(/*! strip-ansi */ \"(ssr)/./node_modules/strip-ansi/index.js\");\nconst wcwidth = __webpack_require__(/*! wcwidth */ \"(ssr)/./node_modules/wcwidth/index.js\");\nconst isInteractive = __webpack_require__(/*! is-interactive */ \"(ssr)/./node_modules/is-interactive/index.js\");\nconst isUnicodeSupported = __webpack_require__(/*! is-unicode-supported */ \"(ssr)/./node_modules/is-unicode-supported/index.js\");\nconst {BufferListStream} = __webpack_require__(/*! bl */ \"(ssr)/./node_modules/bl/bl.js\");\n\nconst TEXT = Symbol('text');\nconst PREFIX_TEXT = Symbol('prefixText');\nconst ASCII_ETX_CODE = 0x03; // Ctrl+C emits this code\n\nclass StdinDiscarder {\n\tconstructor() {\n\t\tthis.requests = 0;\n\n\t\tthis.mutedStream = new BufferListStream();\n\t\tthis.mutedStream.pipe(process.stdout);\n\n\t\tconst self = this; // eslint-disable-line unicorn/no-this-assignment\n\t\tthis.ourEmit = function (event, data, ...args) {\n\t\t\tconst {stdin} = process;\n\t\t\tif (self.requests > 0 || stdin.emit === self.ourEmit) {\n\t\t\t\tif (event === 'keypress') { // Fixes readline behavior\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (event === 'data' && data.includes(ASCII_ETX_CODE)) {\n\t\t\t\t\tprocess.emit('SIGINT');\n\t\t\t\t}\n\n\t\t\t\tReflect.apply(self.oldEmit, this, [event, data, ...args]);\n\t\t\t} else {\n\t\t\t\tReflect.apply(process.stdin.emit, this, [event, data, ...args]);\n\t\t\t}\n\t\t};\n\t}\n\n\tstart() {\n\t\tthis.requests++;\n\n\t\tif (this.requests === 1) {\n\t\t\tthis.realStart();\n\t\t}\n\t}\n\n\tstop() {\n\t\tif (this.requests <= 0) {\n\t\t\tthrow new Error('`stop` called more times than `start`');\n\t\t}\n\n\t\tthis.requests--;\n\n\t\tif (this.requests === 0) {\n\t\t\tthis.realStop();\n\t\t}\n\t}\n\n\trealStart() {\n\t\t// No known way to make it work reliably on Windows\n\t\tif (process.platform === 'win32') {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.rl = readline.createInterface({\n\t\t\tinput: process.stdin,\n\t\t\toutput: this.mutedStream\n\t\t});\n\n\t\tthis.rl.on('SIGINT', () => {\n\t\t\tif (process.listenerCount('SIGINT') === 0) {\n\t\t\t\tprocess.emit('SIGINT');\n\t\t\t} else {\n\t\t\t\tthis.rl.close();\n\t\t\t\tprocess.kill(process.pid, 'SIGINT');\n\t\t\t}\n\t\t});\n\t}\n\n\trealStop() {\n\t\tif (process.platform === 'win32') {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.rl.close();\n\t\tthis.rl = undefined;\n\t}\n}\n\nlet stdinDiscarder;\n\nclass Ora {\n\tconstructor(options) {\n\t\tif (!stdinDiscarder) {\n\t\t\tstdinDiscarder = new StdinDiscarder();\n\t\t}\n\n\t\tif (typeof options === 'string') {\n\t\t\toptions = {\n\t\t\t\ttext: options\n\t\t\t};\n\t\t}\n\n\t\tthis.options = {\n\t\t\ttext: '',\n\t\t\tcolor: 'cyan',\n\t\t\tstream: process.stderr,\n\t\t\tdiscardStdin: true,\n\t\t\t...options\n\t\t};\n\n\t\tthis.spinner = this.options.spinner;\n\n\t\tthis.color = this.options.color;\n\t\tthis.hideCursor = this.options.hideCursor !== false;\n\t\tthis.interval = this.options.interval || this.spinner.interval || 100;\n\t\tthis.stream = this.options.stream;\n\t\tthis.id = undefined;\n\t\tthis.isEnabled = typeof this.options.isEnabled === 'boolean' ? this.options.isEnabled : isInteractive({stream: this.stream});\n\t\tthis.isSilent = typeof this.options.isSilent === 'boolean' ? this.options.isSilent : false;\n\n\t\t// Set *after* `this.stream`\n\t\tthis.text = this.options.text;\n\t\tthis.prefixText = this.options.prefixText;\n\t\tthis.linesToClear = 0;\n\t\tthis.indent = this.options.indent;\n\t\tthis.discardStdin = this.options.discardStdin;\n\t\tthis.isDiscardingStdin = false;\n\t}\n\n\tget indent() {\n\t\treturn this._indent;\n\t}\n\n\tset indent(indent = 0) {\n\t\tif (!(indent >= 0 && Number.isInteger(indent))) {\n\t\t\tthrow new Error('The `indent` option must be an integer from 0 and up');\n\t\t}\n\n\t\tthis._indent = indent;\n\t}\n\n\t_updateInterval(interval) {\n\t\tif (interval !== undefined) {\n\t\t\tthis.interval = interval;\n\t\t}\n\t}\n\n\tget spinner() {\n\t\treturn this._spinner;\n\t}\n\n\tset spinner(spinner) {\n\t\tthis.frameIndex = 0;\n\n\t\tif (typeof spinner === 'object') {\n\t\t\tif (spinner.frames === undefined) {\n\t\t\t\tthrow new Error('The given spinner must have a `frames` property');\n\t\t\t}\n\n\t\t\tthis._spinner = spinner;\n\t\t} else if (!isUnicodeSupported()) {\n\t\t\tthis._spinner = cliSpinners.line;\n\t\t} else if (spinner === undefined) {\n\t\t\t// Set default spinner\n\t\t\tthis._spinner = cliSpinners.dots;\n\t\t} else if (spinner !== 'default' && cliSpinners[spinner]) {\n\t\t\tthis._spinner = cliSpinners[spinner];\n\t\t} else {\n\t\t\tthrow new Error(`There is no built-in spinner named '${spinner}'. See https://github.com/sindresorhus/cli-spinners/blob/main/spinners.json for a full list.`);\n\t\t}\n\n\t\tthis._updateInterval(this._spinner.interval);\n\t}\n\n\tget text() {\n\t\treturn this[TEXT];\n\t}\n\n\tset text(value) {\n\t\tthis[TEXT] = value;\n\t\tthis.updateLineCount();\n\t}\n\n\tget prefixText() {\n\t\treturn this[PREFIX_TEXT];\n\t}\n\n\tset prefixText(value) {\n\t\tthis[PREFIX_TEXT] = value;\n\t\tthis.updateLineCount();\n\t}\n\n\tget isSpinning() {\n\t\treturn this.id !== undefined;\n\t}\n\n\tgetFullPrefixText(prefixText = this[PREFIX_TEXT], postfix = ' ') {\n\t\tif (typeof prefixText === 'string') {\n\t\t\treturn prefixText + postfix;\n\t\t}\n\n\t\tif (typeof prefixText === 'function') {\n\t\t\treturn prefixText() + postfix;\n\t\t}\n\n\t\treturn '';\n\t}\n\n\tupdateLineCount() {\n\t\tconst columns = this.stream.columns || 80;\n\t\tconst fullPrefixText = this.getFullPrefixText(this.prefixText, '-');\n\t\tthis.lineCount = 0;\n\t\tfor (const line of stripAnsi(fullPrefixText + '--' + this[TEXT]).split('\\n')) {\n\t\t\tthis.lineCount += Math.max(1, Math.ceil(wcwidth(line) / columns));\n\t\t}\n\t}\n\n\tget isEnabled() {\n\t\treturn this._isEnabled && !this.isSilent;\n\t}\n\n\tset isEnabled(value) {\n\t\tif (typeof value !== 'boolean') {\n\t\t\tthrow new TypeError('The `isEnabled` option must be a boolean');\n\t\t}\n\n\t\tthis._isEnabled = value;\n\t}\n\n\tget isSilent() {\n\t\treturn this._isSilent;\n\t}\n\n\tset isSilent(value) {\n\t\tif (typeof value !== 'boolean') {\n\t\t\tthrow new TypeError('The `isSilent` option must be a boolean');\n\t\t}\n\n\t\tthis._isSilent = value;\n\t}\n\n\tframe() {\n\t\tconst {frames} = this.spinner;\n\t\tlet frame = frames[this.frameIndex];\n\n\t\tif (this.color) {\n\t\t\tframe = chalk[this.color](frame);\n\t\t}\n\n\t\tthis.frameIndex = ++this.frameIndex % frames.length;\n\t\tconst fullPrefixText = (typeof this.prefixText === 'string' && this.prefixText !== '') ? this.prefixText + ' ' : '';\n\t\tconst fullText = typeof this.text === 'string' ? ' ' + this.text : '';\n\n\t\treturn fullPrefixText + frame + fullText;\n\t}\n\n\tclear() {\n\t\tif (!this.isEnabled || !this.stream.isTTY) {\n\t\t\treturn this;\n\t\t}\n\n\t\tfor (let i = 0; i < this.linesToClear; i++) {\n\t\t\tif (i > 0) {\n\t\t\t\tthis.stream.moveCursor(0, -1);\n\t\t\t}\n\n\t\t\tthis.stream.clearLine();\n\t\t\tthis.stream.cursorTo(this.indent);\n\t\t}\n\n\t\tthis.linesToClear = 0;\n\n\t\treturn this;\n\t}\n\n\trender() {\n\t\tif (this.isSilent) {\n\t\t\treturn this;\n\t\t}\n\n\t\tthis.clear();\n\t\tthis.stream.write(this.frame());\n\t\tthis.linesToClear = this.lineCount;\n\n\t\treturn this;\n\t}\n\n\tstart(text) {\n\t\tif (text) {\n\t\t\tthis.text = text;\n\t\t}\n\n\t\tif (this.isSilent) {\n\t\t\treturn this;\n\t\t}\n\n\t\tif (!this.isEnabled) {\n\t\t\tif (this.text) {\n\t\t\t\tthis.stream.write(`- ${this.text}\\n`);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\tif (this.isSpinning) {\n\t\t\treturn this;\n\t\t}\n\n\t\tif (this.hideCursor) {\n\t\t\tcliCursor.hide(this.stream);\n\t\t}\n\n\t\tif (this.discardStdin && process.stdin.isTTY) {\n\t\t\tthis.isDiscardingStdin = true;\n\t\t\tstdinDiscarder.start();\n\t\t}\n\n\t\tthis.render();\n\t\tthis.id = setInterval(this.render.bind(this), this.interval);\n\n\t\treturn this;\n\t}\n\n\tstop() {\n\t\tif (!this.isEnabled) {\n\t\t\treturn this;\n\t\t}\n\n\t\tclearInterval(this.id);\n\t\tthis.id = undefined;\n\t\tthis.frameIndex = 0;\n\t\tthis.clear();\n\t\tif (this.hideCursor) {\n\t\t\tcliCursor.show(this.stream);\n\t\t}\n\n\t\tif (this.discardStdin && process.stdin.isTTY && this.isDiscardingStdin) {\n\t\t\tstdinDiscarder.stop();\n\t\t\tthis.isDiscardingStdin = false;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tsucceed(text) {\n\t\treturn this.stopAndPersist({symbol: logSymbols.success, text});\n\t}\n\n\tfail(text) {\n\t\treturn this.stopAndPersist({symbol: logSymbols.error, text});\n\t}\n\n\twarn(text) {\n\t\treturn this.stopAndPersist({symbol: logSymbols.warning, text});\n\t}\n\n\tinfo(text) {\n\t\treturn this.stopAndPersist({symbol: logSymbols.info, text});\n\t}\n\n\tstopAndPersist(options = {}) {\n\t\tif (this.isSilent) {\n\t\t\treturn this;\n\t\t}\n\n\t\tconst prefixText = options.prefixText || this.prefixText;\n\t\tconst text = options.text || this.text;\n\t\tconst fullText = (typeof text === 'string') ? ' ' + text : '';\n\n\t\tthis.stop();\n\t\tthis.stream.write(`${this.getFullPrefixText(prefixText, ' ')}${options.symbol || ' '}${fullText}\\n`);\n\n\t\treturn this;\n\t}\n}\n\nconst oraFactory = function (options) {\n\treturn new Ora(options);\n};\n\nmodule.exports = oraFactory;\n\nmodule.exports.promise = (action, options) => {\n\t// eslint-disable-next-line promise/prefer-await-to-then\n\tif (typeof action.then !== 'function') {\n\t\tthrow new TypeError('Parameter `action` must be a Promise');\n\t}\n\n\tconst spinner = new Ora(options);\n\tspinner.start();\n\n\t(async () => {\n\t\ttry {\n\t\t\tawait action;\n\t\t\tspinner.succeed();\n\t\t} catch {\n\t\t\tspinner.fail();\n\t\t}\n\t})();\n\n\treturn spinner;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ora/index.js\n");

/***/ })

};
;